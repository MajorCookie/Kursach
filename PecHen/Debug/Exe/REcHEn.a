;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.10 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 16.12.2015
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 4,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;void main(void)
; 0000 001C {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 001D 	/*
; 0000 001E 		0: default mode, all diods blink
; 0000 001F 		1: switch 1 by 1 to right
; 0000 0020 		2: switch 1 by 1 to left
; 0000 0021 		3: snake move
; 0000 0022 	*/
; 0000 0023 	int MODE = 0;
; 0000 0024 
; 0000 0025 	PORTD=0b00000001;
;	MODE -> R16,R17
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0026 	DDRD=0b00000000;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0027 
; 0000 0028 	PORTC=0x00;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0029 	DDRC=0x00;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002A 
; 0000 002B 	PORTB=0b00000000;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 002C 	DDRB=0b00111111;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 002D 
; 0000 002E 
; 0000 002F 	while (1){
;PCODE: $0000001C VOL: 0
; 0000 0030 
; 0000 0031 		// checking button state, changing mode if needed
; 0000 0032 		// 1 is off, 0 is on
; 0000 0033 
; 0000 0034 		if (PIND.0 == 1){
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0035 			PORTB.6 = 1;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0036 			PORTB.7 = 1;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0037 		}else if (PIND.0 == 0){
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0038 			PORTB.6 = 0;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0039 			PORTB.7 = 0;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003A 		}
; 0000 003B 
; 0000 003C 		// party time !!!
; 0000 003D 
; 0000 003E 		// resetting state
; 0000 003F 		PORTB.0 = 0;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0040 		PORTB.1 = 0;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0041 		PORTB.2 = 0;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0042 		PORTB.3 = 0;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0043 		PORTB.4 = 0;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0044 		PORTB.5 = 0;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0045 
; 0000 0046 		//debugging
; 0000 0047 		delay_ms(500);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0048 		PORTB.0 = 1;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0049 
; 0000 004A 
; 0000 004B 		/*
; 0000 004C 		switch(MODE){
; 0000 004D 			case 0:
; 0000 004E 				PORTB.0 = 1;
; 0000 004F 				PORTB.1 = 1;
; 0000 0050 				PORTB.2 = 1;
; 0000 0051 				PORTB.3 = 1;
; 0000 0052 				PORTB.4 = 1;
; 0000 0053 				PORTB.5 = 1;
; 0000 0054 				delay_ms(500);
; 0000 0055 				PORTB.0 = 0;
; 0000 0056 				PORTB.1 = 0;
; 0000 0057 				PORTB.2 = 0;
; 0000 0058 				PORTB.3 = 0;
; 0000 0059 				PORTB.4 = 0;
; 0000 005A 				PORTB.5 = 0;
; 0000 005B 				delay_ms(500);
; 0000 005C 				break;
; 0000 005D 			case 1:
; 0000 005E 				// turning on 1st indicator
; 0000 005F 				PORTB.0 = 1;
; 0000 0060 				delay_ms(100);
; 0000 0061 
; 0000 0062 				// turning off 1st indicator, turning on 2nd indicator
; 0000 0063 				PORTB.0 = 0;
; 0000 0064 				PORTB.1 = 1;
; 0000 0065 				delay_ms(100);
; 0000 0066 
; 0000 0067 				// turning off 2nd indicator, turning on 3rd indicator
; 0000 0068 				PORTB.1 = 0;
; 0000 0069 				PORTB.2 = 1;
; 0000 006A 				delay_ms(100);
; 0000 006B 
; 0000 006C 				// same ...
; 0000 006D 				PORTB.2 = 0;
; 0000 006E 				PORTB.3 = 1;
; 0000 006F 				delay_ms(100);
; 0000 0070 
; 0000 0071 				PORTB.3 = 0;
; 0000 0072 				PORTB.4 = 1;
; 0000 0073 				delay_ms(100);
; 0000 0074 
; 0000 0075 				PORTB.4 = 0;
; 0000 0076 				PORTB.5 = 1;
; 0000 0077 				delay_ms(100);
; 0000 0078 
; 0000 0079 				// turning off last indicator
; 0000 007A 				PORTB.5 = 0;
; 0000 007B 				delay_ms(100);
; 0000 007C 
; 0000 007D 				break;
; 0000 007E 			case 2:
; 0000 007F 
; 0000 0080 				// turning on last indicator
; 0000 0081 				PORTB.5 = 1;
; 0000 0082 				delay_ms(100);
; 0000 0083 
; 0000 0084 				PORTB.5 = 0;
; 0000 0085 				PORTB.4 = 1;
; 0000 0086 				delay_ms(100);
; 0000 0087 
; 0000 0088 				PORTB.4 = 0;
; 0000 0089 				PORTB.3 = 1;
; 0000 008A 				delay_ms(100);
; 0000 008B 
; 0000 008C 				PORTB.3 = 0;
; 0000 008D 				PORTB.2 = 1;
; 0000 008E 				delay_ms(100);
; 0000 008F 
; 0000 0090 				PORTB.2 = 0;
; 0000 0091 				PORTB.1 = 1;
; 0000 0092 				delay_ms(100);
; 0000 0093 
; 0000 0094 				PORTB.1 = 0;
; 0000 0095 				PORTB.0 = 1;
; 0000 0096 				delay_ms(100);
; 0000 0097 
; 0000 0098 				// turning off first indicator
; 0000 0099 				PORTB.0 = 0;
; 0000 009A 				delay_ms(100);
; 0000 009B 
; 0000 009C 				break;
; 0000 009D 			case 3:
; 0000 009E 				PORTB.0 = 1;
; 0000 009F 				delay_ms(100);
; 0000 00A0 				PORTB.1 = 1;
; 0000 00A1 				delay_ms(100);
; 0000 00A2 				PORTB.2 = 1;
; 0000 00A3 				delay_ms(100);
; 0000 00A4 
; 0000 00A5 				PORTB.0 = 0;
; 0000 00A6 				PORTB.3 = 1;
; 0000 00A7 				delay_ms(100);
; 0000 00A8 				PORTB.1 = 0;
; 0000 00A9 				PORTB.4 = 1;
; 0000 00AA 				delay_ms(100);
; 0000 00AB 
; 0000 00AC 				PORTB.2 = 0;
; 0000 00AD 				PORTB.5 = 1;
; 0000 00AE 				delay_ms(100);
; 0000 00AF 
; 0000 00B0 				PORTB.3 = 0;
; 0000 00B1 				delay_ms(100);
; 0000 00B2 
; 0000 00B3 				PORTB.4 = 0;
; 0000 00B4 				delay_ms(100);
; 0000 00B5 
; 0000 00B6 				PORTB.5 = 0;
; 0000 00B7 				delay_ms(100);
; 0000 00B8 
; 0000 00B9 				break;
; 0000 00BA 			default:
; 0000 00BB 				PORTB.0 = 1;
; 0000 00BC 				delay_ms(500);
; 0000 00BD 				PORTB.0 = 0;
; 0000 00BE 		}
; 0000 00BF 		*/
; 0000 00C0 	}
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 00C1 }
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
